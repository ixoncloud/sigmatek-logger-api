//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "IXON_LoggerAPI"
	Revision           = "0.0"
	GUID               = "{ACE590F9-5AD3-4949-96BA-527A75CCE42D}"
	RealtimeTask       = "false"
	CyclicTask         = "false"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(510,360)">
	<Channels>
		<Server Name="ClassSvr" GUID="{11BE1637-F60C-4AC8-9CA6-3612C9353224}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sData" GUID="{2AC21450-19E0-4156-891A-62A63DBB9C04}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sIPAddrIXON" GUID="{17637C41-D313-4E37-94DD-E3B069963481}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sIPAddrPLC" GUID="{DC20E747-ACC1-40A1-AEA9-56446F3CB2F8}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sPasswordIXON" GUID="{A3E8519A-7F50-4074-8FEC-F80C849D5529}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sState" GUID="{1200F775-D953-4202-9F53-9FAA86A4944A}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false" Comment="shows the State of the Interface Object."/>
		<Client Name="_TCPIPClient1" Required="true" Internal="true"/>
		<Client Name="MyTCPIPClient1" Required="true" Internal="true"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="4"/>
			<SepChn Position="6"/>
		</Servers>
	</Separators>
	<Network Name="IXON_LoggerAPI">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name           = "_TCPIPClient1"
				GUID           = "{96D69589-595B-4626-87AA-30E08C7643FF}"
				Class          = "_TCPIPClient"
				Position       = "(180,150)"
				Visualized     = "true"
				Remotely       = "true"
				CyclicTime     = "10 ms"
				BackgroundTime = "always">
				<Channels>
					<Server Name="Control"/>
					<Server Name="SemaName01"/>
					<Server Name="SemaName02"/>
					<Server Name="TaskName"/>
					<Client Name="_MultiTask"/>
					<Client Name="_StdLib"/>
					<Client Name="_TaskObjectControl"/>
					<Client Name="Config"/>
					<Client Name="MaxConnections" Value="0"/>
					<Client Name="Port" Value="9230"/>
					<Client Name="SigCLib"/>
					<Client Name="SizeOfTXBuffer"/>
				</Channels>
			</Object>
			<Object
				Name       = "MyTCPIPClient1"
				GUID       = "{54A2CB7B-47E5-419E-BD69-32C01D38E280}"
				Class      = "IXON_LoggerAPI_Interface"
				Position   = "(900,150)"
				Visualized = "true"
				Remotely   = "true"
				CyclicTime = "10 ms">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorCode"/>
					<Server Name="ErrorGroup"/>
					<Server Name="ErrorState"/>
					<Server Name="sData"/>
					<Server Name="sIPAddrIXON"/>
					<Server Name="sIPAddrPLC"/>
					<Server Name="sPasswordIXON"/>
					<Server Name="sRcvCnt"/>
					<Server Name="sReconnectDelay"/>
					<Server Name="sSendDelay"/>
					<Server Name="sSndCnt"/>
					<Server Name="State"/>
					<Server Name="sTCPStep"/>
					<Client Name="_StdLib"/>
					<Client Name="_TCPIPClient"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this._TCPIPClient1" Destination="_TCPIPClient1.Control"/>
			<Connection Source="this.MyTCPIPClient1" Destination="MyTCPIPClient1.ClassSvr"/>
			<Connection Source="this.sIPAddrIXON" Destination="MyTCPIPClient1.sIPAddrIXON" Vertices="(1898,270),(1726,600),"/>
			<Connection Source="MyTCPIPClient1._TCPIPClient" Destination="_TCPIPClient1.Control" Vertices="(900,240),(764,240),"/>
			<Connection Source="this.sPasswordIXON" Destination="MyTCPIPClient1.sPasswordIXON" Vertices="(1898,390),(1726,720),"/>
			<Connection Source="this.sState" Destination="MyTCPIPClient1.State" Vertices="(1898,450),(1726,300),"/>
			<Connection Source="this.sIPAddrPLC" Destination="MyTCPIPClient1.sIPAddrPLC" Vertices="(1898,330),(1726,660),"/>
			<Connection Source="this.sData" Destination="MyTCPIPClient1.sData" Vertices="(1898,510),(1726,1080),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
IXON_LoggerAPI : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	sIPAddrIXON 	: SvrChCmd_UDINT;
	sIPAddrPLC 	: SvrChCmd_UDINT;
	sPasswordIXON 	: SvrChCmd_UDINT;
	sState 	: SvrCh__STATE_TCPIPC_INTF_PTofCls__TCPIPClientInterface;
	sData 	: SvrChCmd_UDINT;
  //Clients:
	_TCPIPClient1 	: CltChCmd__TCPIPClient;
	MyTCPIPClient1 	: CltChCmd_IXON_LoggerAPI_Interface;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL sIPAddrIXON::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrIXON::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrPLC::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrPLC::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sPasswordIXON::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sPasswordIXON::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sState::Read
		VAR_OUTPUT
			output (EAX) 	: _TCPIPClientInterface::_STATE_TCPIPC_INTF;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sData::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sData::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using _TCPIPClient
#pragma using IXON_LoggerAPI_Interface


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB IXON_LoggerAPI::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_IXON_LOGGERAPI
0$UINT, 0$UINT, (SIZEOF(::IXON_LoggerAPI))$UINT, 
6$UINT, 2$UINT, 0$UINT, 
TO_UDINT(2366984241), "IXON_LoggerAPI", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::IXON_LoggerAPI.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::IXON_LoggerAPI.sIPAddrIXON.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2071558143), "sIPAddrIXON", 
(::IXON_LoggerAPI.sIPAddrPLC.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(4091093539), "sIPAddrPLC", 
(::IXON_LoggerAPI.sPasswordIXON.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(3939909182), "sPasswordIXON", 
(::IXON_LoggerAPI.sState.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2839362732), "sState", 
(::IXON_LoggerAPI.sData.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(62096333), "sData", 
//Clients:
(::IXON_LoggerAPI._TCPIPClient1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(3456595437), "_TCPIPClient1", TO_UDINT(1778057824), "_TCPIPClient", 1$UINT, 1$UINT, 
(::IXON_LoggerAPI.MyTCPIPClient1.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(1181618911), "MyTCPIPClient1", TO_UDINT(357781282), "IXON_LoggerAPI_Interface", 0$UINT, 0$UINT, 
END_FUNCTION


#define USER_CNT_IXON_LoggerAPI 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_IXON_LoggerAPI] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION IXON_LoggerAPI::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_IXON_LoggerAPI, pCmd := #vmt.CmdTable);
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sIPAddrIXON.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sIPAddrIXON::Read();
	vmt.CmdTable.Write		:= #sIPAddrIXON::Write();
	sIPAddrIXON.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sIPAddrIXON.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sIPAddrPLC.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sIPAddrPLC::Read();
	vmt.CmdTable.Write		:= #sIPAddrPLC::Write();
	sIPAddrPLC.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sIPAddrPLC.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sPasswordIXON.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sPasswordIXON::Read();
	vmt.CmdTable.Write		:= #sPasswordIXON::Write();
	sPasswordIXON.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sPasswordIXON.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sState.pMeth			:= StoreMethod( #sState::Read(), #M_NO_F() );
	IF sState.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sData.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sData::Read();
	vmt.CmdTable.Write		:= #sData::Write();
	sData.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sData.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sIPAddrIXON::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sIPAddrIXON := MyTCPIPClient1.sIPAddrIXON.Read();
	output := sIPAddrIXON;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sIPAddrIXON::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sIPAddrIXON := input;
	result := (MyTCPIPClient1.sIPAddrIXON.Write(sIPAddrIXON))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sData::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sData := MyTCPIPClient1.sData.Read();
	output := sData;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sData::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sData := input;
	result := (MyTCPIPClient1.sData.Write(sData))$UDINT;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sPasswordIXON::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sPasswordIXON := MyTCPIPClient1.sPasswordIXON.Read();
	output := sPasswordIXON;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sPasswordIXON::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sPasswordIXON := input;
	result := (MyTCPIPClient1.sPasswordIXON.Write(sPasswordIXON))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sState::Read
	VAR_OUTPUT
		output (EAX) 	: _TCPIPClientInterface::_STATE_TCPIPC_INTF;
	END_VAR

	sState := MyTCPIPClient1.State.Read();
	output := sState;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sIPAddrPLC::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sIPAddrPLC := MyTCPIPClient1.sIPAddrPLC.Read();
	output := sIPAddrPLC;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI::sIPAddrPLC::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sIPAddrPLC := input;
	result := (MyTCPIPClient1.sIPAddrPLC.Write(sIPAddrPLC))$UDINT;

END_FUNCTION
