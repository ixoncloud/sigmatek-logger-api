//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)

//{{LSL_DEFINES
#define SND_DATA_ARRAY_SIZE 1024
#define SND_ARRAY_SIZE 20
#define RCV_DATA_ARRAY_SIZE 1024
//}}LSL_DEFINES

//{{LSL_DECLARATION

(*!
<Class
	Name               = "IXON_LoggerAPI_Interface"
	Revision           = "0.0"
	GUID               = "{6AF6263F-BF0F-417D-A26B-4288044BDBBA}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(810,360)">
	<Channels>
		<Server Name="sData" GUID="{CD7BECBD-65A1-4857-B038-B1F70CDB5E66}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sIPAddrIXON" GUID="{9CB96FC5-4D9E-4E2F-9B1F-5647047B2EF1}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sIPAddrPLC" GUID="{798E83DD-2CBF-44A1-B3E3-7D38B77EF7CC}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sPasswordIXON" GUID="{85E29B6D-2B14-4EB4-82C1-100A810AF106}" Class="String" Visualized="true" Remotely="true" Initialize="true" WriteProtected="false" Retentive="false" Comment="use this channel to access the string functions"/>
		<Server Name="sRcvCnt" GUID="{CA4A9B9F-01D0-400C-959B-9A4928A4868D}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sReconnectDelay" GUID="{D95B0779-3A9B-4210-8C42-379568F6C3AB}" Visualized="true" Remotely="true" Initialize="true" DefValue="10000" WriteProtected="false" Retentive="false"/>
		<Server Name="sSendDelay" GUID="{C2BC30EB-200C-4EB9-8A3E-5719235E9223}" Visualized="true" Remotely="true" Initialize="true" DefValue="200" WriteProtected="false" Retentive="false"/>
		<Server Name="sSndCnt" GUID="{D40B5163-0DCD-43A0-88A1-975D0BB8C3C1}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="sTCPStep" GUID="{ACE1855D-C7BA-4F13-808F-C0AD46DC9E0E}" Visualized="true" Remotely="true" Initialize="false" WriteProtected="false" Retentive="false"/>
		<Client Name="_StdLib" Required="false" Internal="false"/>
		<Client Name="ST_IPAddrIXON" Required="true" Internal="true"/>
		<Client Name="ST_IPAddrPLC" Required="true" Internal="true"/>
		<Client Name="ST_PasswordIXON" Required="true" Internal="true"/>
		<Client Name="ST_SendData" Required="true" Internal="true"/>
	</Channels>
	<Separators>
		<Servers>
			<SepChn Position="0"/>
			<SepChn Position="6"/>
		</Servers>
	</Separators>
	<Network Name="IXON_LoggerAPI_Interface">
		<!-- List of Components in this network -->
		<Components>
			<Object
				Name       = "_base"
				GUID       = "{1322F179-D93E-4033-A3DF-52A63FABB269}"
				Class      = "_TCPIPClientInterface"
				Position   = "(218,120)"
				Visualized = "false">
				<Channels>
					<Server Name="ClassSvr"/>
					<Server Name="ErrorCode"/>
					<Server Name="ErrorGroup"/>
					<Server Name="ErrorState"/>
					<Server Name="State"/>
					<Client Name="_TCPIPClient"/>
				</Channels>
			</Object>
			<Object
				Name       = "ST_IPAddrIXON"
				GUID       = "{E49A65E0-4286-48BA-9FA8-8BE264404598}"
				Class      = "String"
				Position   = "(210,510)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "ST_IPAddrPLC"
				GUID       = "{9380FF98-48E8-4706-8849-F0105D5BD7B2}"
				Class      = "String"
				Position   = "(210,660)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "ST_PasswordIXON"
				GUID       = "{73AFCC93-C9EF-43C7-8BD6-0FAA4DC69D31}"
				Class      = "String"
				Position   = "(210,810)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
			<Object
				Name       = "ST_SendData"
				GUID       = "{F2748B89-9CE7-4D65-97EB-2774AB8B6196}"
				Class      = "String"
				Position   = "(210,960)"
				Visualized = "true"
				Remotely   = "true">
				<Channels>
					<Server Name="Data"/>
					<Client Name="SingleRealloc" Value="1"/>
				</Channels>
			</Object>
		</Components>
		<Comments>
		</Comments>
		<!-- List of Connections in this network -->
		<Connections>
			<Connection Source="this.ClassSvr" Destination="_base.ClassSvr" Vertices="(1096,210),(924,210),"/>
			<Connection Source="this.State" Destination="_base.State" Vertices="(1096,270),(924,270),"/>
			<Connection Source="this.ErrorState" Destination="_base.ErrorState" Vertices="(1096,330),(924,330),"/>
			<Connection Source="this.ErrorGroup" Destination="_base.ErrorGroup" Vertices="(1096,390),(924,390),"/>
			<Connection Source="this.ErrorCode" Destination="_base.ErrorCode" Vertices="(1096,450),(924,450),"/>
			<Connection Source="_base._TCPIPClient" Destination="this._TCPIPClient" Vertices="(218,210),(38,210),"/>
			<Connection Source="this.ST_IPAddrIXON" Destination="ST_IPAddrIXON.Data"/>
			<Connection Source="this.sIPAddrIXON" Destination="ST_IPAddrIXON.Data" Vertices="(1096,510),(586,600),"/>
			<Connection Source="this.ST_SendData" Destination="ST_SendData.Data"/>
			<Connection Source="this.sData" Destination="ST_SendData.Data" Vertices="(1096,930),(586,1050),"/>
			<Connection Source="this.ST_PasswordIXON" Destination="ST_PasswordIXON.Data"/>
			<Connection Source="this.sPasswordIXON" Destination="ST_PasswordIXON.Data" Vertices="(1096,630),(586,900),"/>
			<Connection Source="this.ST_IPAddrPLC" Destination="ST_IPAddrPLC.Data"/>
			<Connection Source="this.sIPAddrPLC" Destination="ST_IPAddrPLC.Data" Vertices="(1096,570),(586,750),"/>
		</Connections>
		<!-- Headerfiles -->
		<Options>
		</Options>
	</Network>
</Class>
*)
#pragma using _TCPIPClientInterface

IXON_LoggerAPI_Interface : CLASS
: _TCPIPClientInterface
	TYPE
	  teUSER_TCP_STEPS :  //! <Type Public="true" Name="teUSER_TCP_STEPS"/>
	  (
	    UTS_Idle,
	    UTS_Connect,
	    UTS_CheckConnect,
	    UTS_ConnectIXON,
	    UTS_WaitConnectIXON,
	    UTS_WaitData,
	    UTS_SendData,
	    UTS_WaitSendData,
	    UTS_Disconnect,
	    UTS_Error
	  )$UDINT;
	END_TYPE
  //Servers:
	sIPAddrIXON 	: SvrChCmd_UDINT;
	sIPAddrPLC 	: SvrChCmd_UDINT;
	sPasswordIXON 	: SvrChCmd_UDINT;
	sSendDelay 	: SvrCh_UDINT;
	sReconnectDelay 	: SvrCh_UDINT;
	sTCPStep 	: SvrCh_teUSER_TCP_STEPS_PTofCls_IXON_LoggerAPI_Interface;
	sSndCnt 	: SvrCh_DINT;
	sData 	: SvrChCmd_UDINT;
	sRcvCnt 	: SvrCh_DINT;
  //Clients:
	_StdLib 	: CltChCmd__StdLib;
	ST_IPAddrIXON 	: CltChCmd_String;
	ST_PasswordIXON 	: CltChCmd_String;
	ST_SendData 	: CltChCmd_String;
	ST_IPAddrPLC 	: CltChCmd_String;
  //Variables:
		vSendData : ARRAY [0..SND_ARRAY_SIZE-1, 0..SND_DATA_ARRAY_SIZE-1] OF CHAR;

		vSendDataIndex 	: DINT;
		vRcvData : ARRAY [0..RCV_DATA_ARRAY_SIZE-1] OF CHAR;

		vRcvNewData 	: DINT;
		vLength 	: UDINT;
		vLocIPAddress : ARRAY [0..15] OF CHAR;

		vIsConnected 	: BOOL;
		vTcpTimeOut 	: UDINT;
		vCheckConnectionIXON 	: UDINT;
		vTimeMark 	: UDINT;
		VTimeMark2 	: UDINT;
		vIntError 	: DINT;
		vConnectData : ARRAY [0..100] OF CHAR;

  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
				//! <Function Comment="This Method is called if Data is received (Overwrite it)&#13;&#10;For receiving a spezial amount of Data you have to use the &#13;&#10;DataHandling Methode." Name="Response"/>
	FUNCTION VIRTUAL GLOBAL Response
		VAR_INPUT
			pData 	: ^void;			//! <Variable Comment="Pointer to Data" Name="Response.pData"/>
			udsize 	: UDINT;			//! <Variable Comment="Size of Data" Name="Response.udsize"/>
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrIXON::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrIXON::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrPLC::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sIPAddrPLC::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sPasswordIXON::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sPasswordIXON::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sData::Read
		VAR_OUTPUT
			output (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION VIRTUAL GLOBAL sData::Write
		VAR_INPUT
			input (EAX) 	: UDINT;
		END_VAR
		VAR_OUTPUT
			result (EAX) 	: UDINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

#pragma using String
#pragma usingLtd _StdLib


//}}LSL_DECLARATION


FUNCTION GLOBAL TAB IXON_LoggerAPI_Interface::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_IXON_LOGGERAPI_INTERFACE
0$UINT, 0$UINT, (SIZEOF(::IXON_LoggerAPI_Interface))$UINT, 
9$UINT, 5$UINT, 0$UINT, 
TO_UDINT(357781282), "IXON_LoggerAPI_Interface", //Class
TO_UDINT(670188634), "_TCPIPClientInterface", 1$UINT, 1$UINT, //Baseclass
//Servers:
(::IXON_LoggerAPI_Interface.sIPAddrIXON.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(2071558143), "sIPAddrIXON", 
(::IXON_LoggerAPI_Interface.sIPAddrPLC.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(4091093539), "sIPAddrPLC", 
(::IXON_LoggerAPI_Interface.sPasswordIXON.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(3939909182), "sPasswordIXON", 
(::IXON_LoggerAPI_Interface.sSendDelay.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2551846767), "sSendDelay", 
(::IXON_LoggerAPI_Interface.sReconnectDelay.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(3136527153), "sReconnectDelay", 
(::IXON_LoggerAPI_Interface.sTCPStep.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2359729525), "sTCPStep", 
(::IXON_LoggerAPI_Interface.sSndCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(2262743984), "sSndCnt", 
(::IXON_LoggerAPI_Interface.sData.pMeth)$UINT, _CH_SVR_OBJ$UINT, 2#0000000001000000$UINT, TO_UDINT(62096333), "sData", 
(::IXON_LoggerAPI_Interface.sRcvCnt.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000000000$UINT, TO_UDINT(1325544368), "sRcvCnt", 
//Clients:
(::IXON_LoggerAPI_Interface._StdLib.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000000$UINT, TO_UDINT(3689364044), "_StdLib", TO_UDINT(3689364044), "_StdLib", 0$UINT, 0$UINT, 
(::IXON_LoggerAPI_Interface.ST_IPAddrIXON.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2662148250), "ST_IPAddrIXON", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
(::IXON_LoggerAPI_Interface.ST_PasswordIXON.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(159909997), "ST_PasswordIXON", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
(::IXON_LoggerAPI_Interface.ST_SendData.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(2018924793), "ST_SendData", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
(::IXON_LoggerAPI_Interface.ST_IPAddrPLC.pCh)$UINT, _CH_CLT_OBJ$UINT, 2#0000000000000010$UINT, TO_UDINT(4063775470), "ST_IPAddrPLC", TO_UDINT(1850111279), "String", 1$UINT, 11$UINT, 
END_FUNCTION


#define USER_CNT_IXON_LoggerAPI_Interface 14

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_IXON_LoggerAPI_Interface] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION IXON_LoggerAPI_Interface::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
		nCmdSize	: UINT;
	END_VAR

	ret_code	:= _TCPIPClientInterface::@STD();
	IF ret_code <> C_OK THEN
		RETURN;
	END_IF;
	nCmdSize		:= _TCPIPClientInterface::ClassSvr.pMeth^.nCmds$UINT*SIZEOF(pVoid) + CMDMETH.Init;

	_memcpy((#vmt.CmdTable)$^USINT, _TCPIPClientInterface::ClassSvr.pMeth, nCmdSize);
	vmt.CmdTable.nCmds		:= nSTDCMD + USER_CNT_IXON_LoggerAPI_Interface;
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
#pragma warning (disable : 74)
	vmt.UserFcts[4]		:= #Response();

#pragma warning (default : 74)
	_TCPIPClientInterface::ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF _TCPIPClientInterface::ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sIPAddrIXON.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sIPAddrIXON::Read();
	vmt.CmdTable.Write		:= #sIPAddrIXON::Write();
	sIPAddrIXON.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sIPAddrIXON.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sIPAddrPLC.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sIPAddrPLC::Read();
	vmt.CmdTable.Write		:= #sIPAddrPLC::Write();
	sIPAddrPLC.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sIPAddrPLC.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sPasswordIXON.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sPasswordIXON::Read();
	vmt.CmdTable.Write		:= #sPasswordIXON::Write();
	sPasswordIXON.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sPasswordIXON.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sSendDelay.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sSendDelay.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sReconnectDelay.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sReconnectDelay.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	sTCPStep.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF sTCPStep.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	_memcpy((#vmt.CmdTable)$^USINT, sData.pMeth, SIZEOF(CMDMETH));
	vmt.CmdTable.nCmds		:= nSTDCMD;
	vmt.CmdTable.Read		:= #sData::Read();
	vmt.CmdTable.Write		:= #sData::Write();
	sData.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF sData.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::Init
  VAR
  	index : UDINT;
  END_VAR

  if _FirstScan then
    vTcpTimeOut := 2000 ms;
    vCheckConnectionIXON := 10000 ms;
    vTimeMark := ops.tAbsolute := 10000 ms;
  end_if;
END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR
  VAR
  	retCode : DINT;
    index : UDINT;
    length : UDINT;
    i : INT;
  END_VAR


  if ST_SendData.GetLength() > 0 then
    ST_SendData.GetDataAt(pData:=#vSendData[vSendDataIndex][0], udSize:=ST_SendData.GetLength(), udAt:=0);
    ST_SendData.Clear();
    vSendDataIndex += 1;
  end_if;
  

  // ==========================================================================
  case sTCPStep of
   
    // --------------------------------------------------------------
    UTS_Idle:  
      if (ops.tAbsolute - vTimeMark) > 1000 ms then
        sTCPStep := UTS_Connect;
      end_if;
         
    // --------------------------------------------------------------
    UTS_Connect:  
      
      vLength := ST_IPAddrIXON.GetLength();

      if vLength > sizeof(vLocIPAddress) then
        vTimeMark := ops.tAbsolute;
        vIntError := -1; // IP address too long.
        sTCPStep := UTS_Error;
        return;
      end_if;

      ST_IPAddrIXON.GetDataAt(pData:=#vLocIPAddress[0], 
                                 udSize:=vLength, 
                                 udAt:=0);
      
      vLocIPAddress[vLength]:=0;                          
      
      retCode := AddConnection(pIPAddress:=#vLocIPAddress[0], 
                               udTimeout:= 0);
      
      if retCode > 0 then
        vTimeMark := ops.tAbsolute;
        sTCPStep := UTS_CheckConnect;
      else
        vTimeMark := ops.tAbsolute;
        vIntError := -2; // Connection could not be established.
        sTCPStep := UTS_Error;
        return;
      end_if;
   
    // --------------------------------------------------------------
    UTS_CheckConnect:  
      
      if vRcvNewData = 1 then
        vRcvNewData := 0;
        if _memcmp(ptr1:=#vRcvData[0], ptr2:="HELO", cntr:=4) = 0 then
          sTCPStep := UTS_ConnectIXON;
        end_if;      
      end_if;
      if (ops.tAbsolute - vTimeMark) > vTcpTimeOut  then
        sTCPStep := UTS_Disconnect;        
      end_if;

    // --------------------------------------------------------------
    UTS_ConnectIXON: 

      _strcpy(dest:=#vConnectData[0], src:="DEVC ");
      length := ST_IPAddrPLC.GetLength();
      ST_IPAddrPLC.GetDataAt(pData:=#vConnectData[5], udSize:=length, udAt:=0);
      index := 5 + length;
      _strcat(dest:=#vConnectData[index], src:=" ");
      length := ST_PasswordIXON.GetLength();
      index := index + 1;
      ST_PasswordIXON.GetDataAt(pData:=#vConnectData[index], udSize:=length, udAt:=0);
      index := index + length;
      vConnectData[index] := 16#0a;
      vConnectData[index + 1] := 0;
      
      retCode := SendData(pData:=#vConnectData[0], 
                          udSize:= index + 1,
                          bDirect:=TRUE);
                          
      if retCode = 0 then
        vTimeMark := ops.tAbsolute;
        sTCPStep := UTS_WaitConnectIXON;
      else
        vTimeMark := ops.tAbsolute;
        vIntError := -11; // Error connecting IXON
        sTCPStep := UTS_Error;
        return;      
      end_if;    
    
    // --------------------------------------------------------------
    UTS_WaitConnectIXON: 
      
      if vRcvNewData = 1 then
        vRcvNewData := 0;
        if _memcmp(ptr1:=#vRcvData[0], ptr2:="DEVC OK", cntr:=7) = 0 then
          vTimeMark := ops.tAbsolute;
          sTCPStep := UTS_WaitData;
        end_if;
      end_if;    
      if (ops.tAbsolute - vTimeMark) > vTcpTimeOut  then
        vIntError := -12; // Error connecting IXON response
        sTCPStep := UTS_Error;        
      end_if;    
    
    // --------------------------------------------------------------
    UTS_WaitData: 
    
      vIsConnected := IsConnected();
      
      if vIsConnected = FALSE then
        sTCPStep := UTS_Disconnect;
      elsif _strlen(src:=#vSendData[0][0]) > 0 & (ops.tAbsolute - VTimeMark2) > sSendDelay then
        sTCPStep := UTS_SendData;    
      elsif (ops.tAbsolute - vTimeMark) > vCheckConnectionIXON  then
        sTCPStep := UTS_ConnectIXON;        
      end_if;  

    // --------------------------------------------------------------
    UTS_SendData: 
    
      retCode := SendData(pData:=#vSendData[0][0], 
                          udSize:= _strlen(src:=#vSendData[0][0]),
                          bDirect:=TRUE);
                          
      if retCode = 0 then
        for i := 0 to SND_ARRAY_SIZE - 2 do
          vSendData[i] := vSendData[i + 1];
          _strcpy(dest:=#vSendData[SND_ARRAY_SIZE - 1][0], src:="");
        end_for;
        vSendDataIndex -= 1;

        sSndCnt += 1;
        vTimeMark := ops.tAbsolute;
        vTimeMark2 := ops.tAbsolute;
        sTCPStep := UTS_WaitData; //UTS_WaitSendData;
      else
        vTimeMark := ops.tAbsolute;
        vIntError := -3; // Error sending data
        sTCPStep := UTS_Error;
        return;      
      end_if;

    // --------------------------------------------------------------
    UTS_WaitSendData: 

      if (ops.tAbsolute - vTimeMark) > vTcpTimeOut  then
        sTCPStep := UTS_Disconnect;        
      end_if;

      
    // --------------------------------------------------------------
    UTS_Disconnect: 
    
      retCode := DelConnection();
      
      if retCode  = TCP_CLT_NO_ERROR then
        vTimeMark := ops.tAbsolute;
        sTCPStep := UTS_Idle;
      else
        vTimeMark := ops.tAbsolute;
        vIntError := -4; // Error while closing the connection.
        sTCPStep := UTS_Error;
        return;      
      end_if;
      
    // --------------------------------------------------------------
    UTS_Error:
      if vIntError = -2 & (ops.tAbsolute - vTimeMark) > sReconnectDelay then //Connect error 
        sTCPStep := UTS_Connect;
      ELSif vIntError <= -11 then //IXON Connect error 
        sTCPStep := UTS_DISConnect;
      end_if;

  end_case;
  // ==========================================================================

	state := READY;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::Response
	VAR_INPUT
		pData 	: ^void;
		udsize 	: UDINT;
	END_VAR
  VAR
  	pDest : ^void;
  END_VAR

  sRcvCnt += 1;

  pDest:= _StdLib.MemSet(dest:=#vRcvData[0], 
                         value:=0, 
                         size:=sizeof(vRcvData));
                           
  if pDest <> #vRcvData[0] then
    vIntError := -5;
    sTCPStep := UTS_Error;
    return;
  end_if;  

  if udsize > sizeof(vRcvData) then
    udsize := sizeof(vRcvData);
  end_if;
  
  pDest := _StdLib.MemCpy(dest:=#vRcvData[0], 
                          source:=pData, 
                          size:=udsize);
  
  if pDest <> #vRcvData[0] then
    vIntError := -6;
    sTCPStep := UTS_Error;
    return;
  end_if;
  
  vRcvNewData := 1;
  
END_FUNCTION

FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sIPAddrIXON::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sIPAddrIXON := ST_IPAddrIXON.Data.Read();
	output := sIPAddrIXON;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sIPAddrIXON::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sIPAddrIXON := input;
	result := (ST_IPAddrIXON.Data.Write(sIPAddrIXON))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sPasswordIXON::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sPasswordIXON := ST_PasswordIXON.Data.Read();
	output := sPasswordIXON;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sPasswordIXON::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sPasswordIXON := input;
	result := (ST_PasswordIXON.Data.Write(sPasswordIXON))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sData::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sData := ST_SendData.Data.Read();
	output := sData;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sData::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sData := input;
	result := (ST_SendData.Data.Write(sData))$UDINT;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sIPAddrPLC::Read
	VAR_OUTPUT
		output (EAX) 	: UDINT;
	END_VAR

	sIPAddrPLC := ST_IPAddrPLC.Data.Read();
	output := sIPAddrPLC;

END_FUNCTION


FUNCTION VIRTUAL GLOBAL IXON_LoggerAPI_Interface::sIPAddrPLC::Write
	VAR_INPUT
		input (EAX) 	: UDINT;
	END_VAR
	VAR_OUTPUT
		result (EAX) 	: UDINT;
	END_VAR

	sIPAddrPLC := input;
	result := (ST_IPAddrPLC.Data.Write(sIPAddrPLC))$UDINT;

END_FUNCTION
